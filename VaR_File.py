# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ohgovIVd5HJoCLwpx6BRzhmh27L-tqGJ
"""

import numpy as np
import matplotlib.pyplot as plt
from scipy.stats import norm

def VaR(r, confidence, principal=1):
    """
    This function calculates the Value at Risk (VaR) at a given confidence level.

    Parameters:
    - r: array-like, stock return series
    - confidence: float, confidence level (e.g., 0.95 for 95% confidence)
    - principal: float, initial investment value (default is 1)

    Returns:
    - VaR: Estimated potential loss at the given confidence level
    """
    alpha = 1 - confidence
    var_percentile = np.percentile(r, alpha * 100)
    VaR_value = principal * abs(var_percentile)
    return VaR_value

def percent_var(r, confidence):
    """
    Computes the percentile-based VaR and plots the return distribution histogram.

    Parameters:
    - r: array-like, stock return series
    - confidence: float, confidence level (e.g., 0.95 for 95% confidence)

    Returns:
    - Percentile-based VaR
    """
    alpha = 1 - confidence

    plt.hist(r, bins=50, alpha=0.75, color='blue', edgecolor='black')
    plt.title(f"Return Distribution - {confidence*100}% Confidence Level")
    plt.xlabel("Returns")
    plt.ylabel("Frequency")
    plt.axvline(np.percentile(r, alpha * 100), color='red', linestyle='dashed', linewidth=2, label="VaR Threshold")
    plt.legend()
    plt.show()

    var_value = np.percentile(r, alpha * 100)
    return abs(var_value)

if __name__ == "__main__":
    returns = np.random.normal(0, 1, 10000)
    print(f"97.72% percentile: {np.percentile(returns, 97.72)}")

    r = np.random.normal(0.05, 0.03, 1000000)
    probability2SD = norm.cdf(2)
    my_confidence = probability2SD
    my_percent_var = percent_var(r, my_confidence)
    print("Computed Percentile-based VaR:", np.round(my_percent_var, 2))
    print("VaR test passed:", np.round(my_percent_var, 2) == 0.01)

    investment_value = 1000000
    my_VaR = VaR(r, my_confidence, investment_value)
    print(f"Estimated VaR at {my_confidence*100:.2f}% confidence: ${my_VaR:,.2f}")