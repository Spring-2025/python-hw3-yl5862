# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ohgovIVd5HJoCLwpx6BRzhmh27L-tqGJ
"""

import numpy as np

def ES(losses, confidence=None, VaR=None):
    """
    Calculate the Expected Shortfall (Conditional VaR) of losses.

    Parameters:
    - losses: array-like, positively stated loss values.
    - confidence: float, confidence level (e.g., 0.99 for 99%).
    - VaR: float, optional dollar value specifying the Value at Risk (VaR) threshold.

    Returns:
    - Expected Shortfall (ES): The average loss exceeding the VaR threshold.
    """
    if VaR is None:
        if confidence is None:
            raise ValueError("Either confidence level or VaR must be provided.")
        VaR = np.percentile(losses, 100 * (1 - confidence))
    exceeding_losses = losses[losses > VaR]
    if exceeding_losses.size == 0:
        return VaR
    es_value = np.mean(exceeding_losses)
    return es_value

if __name__ == "__main__":
    losses = np.random.uniform(0, 100, 100000)
    es_confidence = ES(losses=losses, confidence=0.8)
    print(f'ES with confidence 80%: {np.round(es_confidence, 0)}')

    es_var = ES(losses=losses, VaR=80)
    print(f'ES with VaR = 80: {np.round(es_var, 0)}')

    print("ES confidence test passed:", np.round(es_confidence, 0) == 90)
    print("ES VaR test passed:", np.round(es_var, 0) == 90)